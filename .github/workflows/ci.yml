name: CI
on:
  push:
    branches:
    - main
  pull_request:
    paths-ignore:
    - README.md

  schedule:
    # run this once a week (wednesday) at 3 am UTC
  - cron: 0 3 * * 3
  workflow_dispatch:



jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'
        include:
        - os: ubuntu-20.04
          python-version: '3.8'
          deps: minimal
        - os: macos-latest
          python-version: '3.12'
        - os: windows-latest
          python-version: '3.12'

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - run: python -m pip install --upgrade pip

    - if: matrix.deps == 'minimal'
      run: |
        pipx run uv pip compile pyproject.toml --resolution=lowest-direct > mindeps.txt
        python -m pip install --requirement mindeps.txt --only-binary ':all:'

    - name: Build
      run: |
        python -m pip install .
        python -m pip install --requirement requirements/tests.txt

    - run: python -m pip list

    - name: Run pytest
      run: |
        python -m coverage run --parallel-mode -m pytest --color=yes

    - name: Upload coverage data
      # only using reports from ubuntu because
      # combining reports from multiple platforms is tricky (or impossible ?)
      if: startsWith(matrix.os, 'ubuntu')
      uses: actions/upload-artifact@v4
      with:
        name: nonos_coverage_data-${{ matrix.os }}-${{ matrix.python-version }}
        path: .coverage.*
        if-no-files-found: ignore

  type-check:
    strategy:
      matrix:
        python-version:
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'
        - '3.12'

    runs-on: ubuntu-latest
    name: type-checking

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Build
      run: |
        python -m pip install --upgrade pip
        python -m pip install .
        python -m pip install --requirement requirements/typecheck.txt

    - name: Run mypy
      run: mypy nonos tests

  image-tests:
    name: Image tests
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x

    - uses: actions/checkout@v4

    - name: Build
      run: |
        python -m pip install --upgrade pip
        python -m pip install .
        python -m pip install --requirement requirements/tests.txt

    - name: Run Image Tests
      run: |
        python -m pip freeze
        pytest --color=yes --mpl -m mpl_image_compare \
               --mpl-generate-summary=html \
               --mpl-results-path=nonos_pytest_mpl_results \
               --mpl-baseline-path=tests/pytest_mpl_baseline

    - name: Generate new image baseline
      if: failure()
      run: |
        pytest --color=yes --mpl -m mpl_image_compare \
               --mpl-generate-path=nonos_pytest_mpl_new_baseline \
               --last-failed

    # always attempt to upload artifacts, even
    # (and especially) in case of failure.
    - name: Upload pytest-mpl report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nonos_pytest_mpl_results
        path: nonos_pytest_mpl_results/*

    - name: Upload pytest-mpl baseline
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nonos_pytest_mpl_new_baseline
        path: nonos_pytest_mpl_new_baseline/*
        if-no-files-found: ignore

  coverage:
    name: Combine coverage reports
    runs-on: ubuntu-latest
    needs: tests

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        # Use latest Python, so it understands all syntax.
        python-version: 3.x

    - run: python -m pip install --upgrade coverage[toml]

    - uses: actions/download-artifact@v4
      with:
        pattern: nonos_coverage_data-*
        merge-multiple: true

    - name: Check coverage
      run: |
        python -m coverage combine
        python -m coverage html --skip-covered --skip-empty
        python -m coverage report --fail-under=80

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: nonos_coverage_report
        path: htmlcov
      if: ${{ always() }}

  docs:
    runs-on: ubuntu-latest
    name: docs

    concurrency:
      group: ${{ github.ref }}-docs
      cancel-in-progress: true

    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
    - name: Setup env
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements/docs.txt
    - name: Build
      run: |
        python -m mkdocs build
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: site
        path: site
